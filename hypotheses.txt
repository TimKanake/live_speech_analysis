it is the end of twenty seventeen and this is been a great year for software engineering daily we're taking a break over the holidays but we're gonna be back after new years with a lot of new content and for now we are re playing a few of the most popular episodes from the two and a half year back catalog of software engineering daily and we remove the ads to make for a smooth the listening experience if you're taking some time over the holidays to listen to some software engineering daily take a break from your interaction with the family go for a walk with that nice old episode of software engineering daily you won't have to skip over any ads or feel obligated to listen to the ads to support software engineering daily consider this a vacation for the both of us we have big plans for twenty eighteen we've got new types of content coming we've got more in person events meet ups but also more of the same long form interviews about technical software topics that's what I love to do and I think that's what most people are listening in four and as we make our way into the new year I would love to hear from you and know what you're interested in hearing about four twenty eighteen or who you are or basically anything send me an email Jeff at software engineering daily dot com join our slack channel you can find the link at software getting daily dot com you wanna talk to more engineers within the community and you can also sign up for our newsletter which you can find on software engineering daily dot com at the top of the page in the newsletter we will let you know about upcoming live events and other developments within the world of software engineering daily as always thanks for listening and happy holidays goodness a writer speaker an entrepreneur he's the author of many books including the debt and most recently what to do when it's your turn Seth welcome to software engineering daily well it's a pleasure and I have to tell you that my software engineering professors at tufts are rolling over in their grave and talk to them on something called software engineering daily well yeah and I think one reason behind that might be that when you went to college you had this unique strategy where you took classes in a bunch of different disciplines and you actually tried to get the minimum grade that allowed you to graduate with both computer science and philosophy degree so I'm curious how that variety of subjects and pursuits made you into a different person then maybe other computer science students it was it was certainly one of the best academic decisions I have ever made and I commend it to everyone because the fact is that you almost never use this stuff you technically learned in college when you get to work that if you think about the next time you drive to work over bridge you better hope that the person who designed that bridge wasn't using skills that they haven't in undergrad right that what happens is colleges a badge to get the job and then we're basically an apprentice for a few years before work producing significant work and so what I learned in college was how to think broadly and to make connections at instead of taking four courses a semester I took six and instead of taking courses while going deeper and deeper and deeper I was doing everything I could to go wide and it turns out that's the way life works at least for someone like me in that I do my best work when I'm connecting things that don't seem connected and I started that habit when I was in college okay and speaking about computer science specifically though were there any I mean a lot of your books talk about these cultural myths that we encounter where there any myths that you felt were propagated in the computer science curriculum you know let's be clear in nineteen eighty computer science was not what computer science is now I was certain I mean I did it was all there we were using steam engines and in are saying courses in artificial telogen is when I got to Stanford I took a PhD Corsica Doug when not in a high so the seeds were certainly present but remember that the apple two was all we had to PC was right around the corner the mac didn't launch to eighty four so mostly what you were taught was that computer science got done by people in shiny clean rooms not by everyone and that what you also were taught was that basically the computer was a giant furnace in your job was to shovel coal into it and the thought that it was going to be widely used ubiquitous democratic open to anyone who could type was completely alien to everybody there arm the other thing that I point out to people who you know as I spent a fair amount time with teenagers who are seeking to make an impact in the world studying computer science in college is not the best way to become a computer programmer for a living what do you mean by that what computer science is it in a rigorous academic art form that has a history that has a culture that is not designed to make Java script apps that hack your way to convert CSV files to something else useful it is an understanding of the you know the yield of a bubble sort versus something else and %HESITATION if you want to program for a living the best way to do that is to program and then to program some more and I think that we need architects to go to architect school it's not clear to me that most people who program for a living I'm leaving out to people who are doing deep fear it Google need to understand for four years all about what happened before and how assembly language works in thing swapping in and out of the sea view but I might be in the minority on that one well no so I think I kind of agree with you on that because my experience in college was actually that this focus on theory over practice was kind of counterproductive and I feel like if you if you've if if the professors were focused more on practice and actually hacking things together in writing Java script no brand random Java script apps rather than proving things %HESITATION I feel like theory falls from the practice but the converse is not necessarily true exactly as I feel like I was counterproductive not only that but software engineering is fundamentally different than software and I love the fact that you've got the word engineering in there when you you know I've been in organizations that are spending millions of dollars a month on programming and the people involved don't know what the mythical man month is and that's a crime is a crime to not have learned from Jules bowl ski it's a crime to not understand the systems ramifications both people and hardware that are part of software engineering because software is more than just code it is the systems that hold that code and the people who make it and getting good at that is how you avoid missing deadlines and how you avoid refactoring every six months and how you avoid just a massive on commented hack when somebody could actually cleaned out the craft and written something useful yeah okay so I'm I'm curious about the experience you had building the first software company you bill which as I understand your bands are right that's right there were two failed software companies before that but we shall not mention them oh really okay okay %HESITATION will in nineteen ninety five I guess that's when you start your you're done what were the biggest difficulties of starting a software company the engineering difficulties okay so here's the way it no you don invented ethical now we were the first people to do non spam email marketing if you got today a letter in your email box from Amazon or anybody else does cause us we invented that and %HESITATION we ran the whole thing on an IBM PC for about twelve weeks meaning that people would send us email the PC would open it read it understand what it said and walked back and the guy who Graham debt built it as a hack it was not a sophisticated piece of work what we had the problem that programmers today rarely half was the internet was not designed for scale so we had to challenges won the pipe which was the fastest pipe we could buy could not carry all the email that we were getting and sending it was fall and that doesn't happen anymore ever and number two is that we could break the machine that was being used it to many people touched it so we had a hundred thousand emails a day just melted in failed and now most of the heavy lifting stuff is a W. S. and similar places so you don't have to spend all your time making sure the building doesn't fall down the building's not gonna fall down today you have to work on something different than that did you learn anything interesting about managing engineers or communicating with engineers oh yeah I learned a ton I would say the biggest mistake which if I was doing it again I would make again was that the person who was running the software side of things for me who I trusted very much wanted to live in Boston and I needed to live in New York so we had one office in New York with forty five people in it one office in Boston the nine and that's just crazy I the people who you hear about who have software operations offshore I don't know how you do it because the marketing people all the sales people that content people they need to keep bumping in to suffer people and vice versa debt in what we are doing here is trying to weave together different ways of looking at the world into a synthesized product and it's really hard to do that if people are hundreds or thousands of miles apart even with slack here yeah even was slack you know when when we built square do I made the same choice again and so we had suffered people in Virginia and I'm disappearing we had an editor in chief in California and we only had nine people in the whole team we built the fortieth because website US with nine people are and again that's how what happens when you have to worry about that to house burning down is the systems are much easier to maintain today button we still had the same challenge that that we can make sure that the spec was truly known because it had to be in writing but what was missing was the nuance of people being able to cycle in a room in a lean way much faster but I will put it one aside which is I think if you have clients the opposite is true so that's good do we did one giant project in order to pay the rent we private label the version of our software the deal we made was we said to that at client it's gonna cost you this much money this is the exact back any changes to this back after you made in writing and any changes after we're done cost you five hundred dollars an hour %HESITATION and they usually signed on because we had a good reputation and because it was pretty expensive but because we couldn't because we don't have any meetings after we signed on we got to suffer done really fast because the spec with his back and then they turned around and bought you know next to three thousand hours worth of two weeks to it because they had were disciplined enough to design the spec right the first time and so where programming projects usually get into trouble in my experience is people are disciplined enough to get the speck right the first time the sale know it when I see it and I don't believe in that I think professional shouldn't do that so what we did with when we first bolts could do was we spent three months speaking with in Photoshop with graphics every one of the hundred and fifty pages that were the key part of our site and then we went to the outside chop shop and said here's this back with pictures and files how long will it take a bill this they said ninety days and we serve and then a fully expected that their value change orders and we interact we said fine you will hear from us again for three months and they didn't and so they finished it on time because they're professionals and we took what we got because we're professionals and that was the core of what we built wow and I think that discipline is missing from a lot of people who create software and I think that's a shame we don't build buildings and we don't build cars by changing things all the time we get us back and then they build it and I think we ought to do the same thing with software so you have a podcast that I've listened to several times over the years called start up school I and I recommend the listeners to check it out you you talk about the dichotomy between a freelancer and an entrepreneur and I think this is a really important distinction to draw and and I think software engineers are often unsure where they fall along this maybe you think it's a gradient maybe think it's a up polar ends but I'm how should a software engineer think about the landscape of freelancing verses entrepreneurship like maybe there's a there's a person out there %HESITATION sitting in the cubicle at Google or Microsoft somewhere and they're unsure if they're freelance or an entrepreneur love this question a lot of people in your industry are swayed by the media and the media celebrates the sucker Berg's of the world people who are brilliant programmers to become entrepreneurs let me be really clear an entrepreneur makes money when he sleeps she makes money when she sells the company she doesn't do the work herself that her job is to find other people to do every job that's what entrepreneurs to freelancers get paid when they work freelancers I do work with their own two hands and they get paid for now often when a freelancer tries to scale from being a freelancer to being an entrepreneur there's more work to be done so who do they hire to hire the cheapest most talented person they can find themselves and so if freelancers here trying to much burners can't decide which they are and if they're busy hiring themselves to do the coding you know what they're not doing their real job which is raising money doing product identification market a invocation and bring things to the world self discipline of being an entrepreneur if you are a brilliant programmer is to give up being a programmer and start being a spinner instead an interesting so in the Icarus deception this is a book that you wrote that I really enjoyed you wrote about how it caress was warned not to fly too close to the sun but the cautionary tale that you stress is equally risky is that if you fly low and the waves will get you and kind of the the %HESITATION I think that Al Gore you're you're trying to draw is that you know yes it's risky to be over ambitious but it's also risky to be under ambitious in what ways do you see engineers afflicted by the Icarus deception okay so you could argue in nineteen seventy five if you didn't have access to a mainframe computer you had no choice but to go work for the giant military industrial contractor down the street but now if you have a laptop and I'm assuming everyone listening to this does you are connected to the very same server farms market places and financial opportunities as everyone else on earth so the playing field has never ever been more level that means everything you don't build is your choice not to build it that every connection you don't make every generous act you don't take is on you because the doors are wide open and so we don't get to be Gilbert anymore we don't complain about the pointy haired boss because the fact is you're the boss annually complaining about yourself okay so you see it's so like lack of autonomy maybe well you know if you're a working stiff you're working whatever it is sixty hours a week in the coding farm in the cubicle what are you doing with the other hundred eight hours a week the fact is you could code something you could build something with utility you could have freelance clients you could find a partner who wants to be an entrepreneur and go for the ride of a lifetime you could find a nonprofit that needs a map of Haiti that can be annotated in real time to identify people who need help there's at ten thousand things you could do that would make the world a better place or help you make more money or both and there's nothing stopping you it's you know of someone who doesn't have your talent can say well I don't feel like running a lemonade stand I don't have enough leverage to start a business but you do right and that idea that the world needs you and that you could use the most powerful tool in the history of mankind software to create value for you or for other people and you're not doing it because you want to play world the Warcraft I think it's on you and so you talk a lot about finding the ways that you can do your best to work %HESITATION if if if a software engineer enough decided came to spend these extra hundred and eight hours of the week doing something on the side and then they start to do a project and they don't feel like super passionate about or the trying to get the passion how do they navigate towards doing their best to work okay so you know this whole idea of doing what you love is pretty misguided in my experience I think the happiest people I know are the people have chosen to love what they do which is very different than if you grow up loving flowers you're probably gonna hate being a florist because florists don't deal with flowers florist deal with bills and angry customers and landlords they're not sitting there all day playing with roses that's the system florist's shop you need to figure out does it give you pleasure to make a computer bend to your will does he give you pleasure to walk into a marketplace and change it from one thing to another does give you pleasure to extract value we're everyone else said there was no value before you got there does he give you pleasure to make other people more productive those are the hallmarks of a professional programmer and it doesn't really matter whether you're dealing with moving container ships one end of the earth or flowers what matters is you're a software engineer and software engineers should be getting their thrills for making software to do things that matter yeah and I can speak to that resonate with me I mean I didn't grow up wanting to be a software engineering podcaster but I kind of stumbled into it and I saw it as an opportunity where I could do a good job and %HESITATION at and I chose to embrace it and enjoy it and it's it's served me well %HESITATION so your most recent book is called what to do when it's your turn what were you trying to convey in this book the sad truth is people don't read anymore bookstores are going away and the typical if you look at the at data analysis of what pages people are bookmarking in their candles your ship of non fiction books drops off precipitously after page ten so I don't need to write books I don't wake up in the morning saying it's my turn to write a book it's my job to write a book only read a book if I have to because the idea would let me go and the idea of the your turn book which I designed it illustrated myself is get under people's skin it is a manifesto is a whack upside the head basically it is argument about what it means to think and dance and dream like an artist because artists aren't people who work in paint artists are people who dance with fear and there are people who are generous enough to live on the edge of what is possible and my thesis is that they're far more artists in the world and we'd like to acknowledge and that if I could make a book that on every single page would make people feel more like an artist that felt like it was worth the journey and I constructed the publishing the book opposed to myself so that people would be encouraged by multi packs five at a time twelve at a time hundreds of time because if you buy more want them one copy of a book you going to give it away and that idea of it spreading sideways person to person really %HESITATION resonate to me and so far it's working more than a hundred thousand people have read it which is pretty cool so what I love is this urge to convince people that maybe they're an artist or maybe they are an artist and they they have an imperative to create art %HESITATION but one thing I have encountered is I find myself in conversations with people sometimes 